Node.
Node es solo un entorno JavaScript, tambien se puede decir que es un motor de JS.

Enrutamiento con la Express
Es necesario crear una instancia de Express usualmente se le llama app.
Por lo general las rutas en express siguen el siguiente formato:
    'app.METHOD(PATH, HADLER)', donde.

    app: es una instancia de la aplicación Express.
    METHOD: es un método HTTP, como GET, POST, PUT, DELETE, etc.
    PATH: es la ruta URL en la que se realizará la solicitud.
    HANDLER: es una función de controlador que se ejecuta cuando se realiza una solicitud a la ruta especificada.
        Parametros de HANDLER.

        ==> req: representa la solicitud entrante, dado a que contienen información sobre esta como son los sig:
            => req.params: Un objeto que contiene los parámetros de la ruta definidos en la URL.
            => req.query: Un objeto que contiene los parámetros de consulta (query parameters) de la URL.
            => req.body: Un objeto que contiene los datos enviados en el cuerpo de la solicitud (por ejemplo, cuando se envía un formulario).
            => req.headers: Un objeto que contiene los encabezados de la solicitud.

        ==> res: representa la respuesta saliente, dado que podemos envar respuestas al cliente como las siq:
            => res.send(): Envía una respuesta de texto o HTML al cliente.  
            => res.json(): Envía una respuesta en formato JSON al cliente.
            => res.status(): Establece el código de estado de la respuesta HTTP.
            => res.redirect(): Redirige al cliente a otra URL.
            => res.sendFile(): Envía un archivo al cliente.

    Ejemplos:

    app.get('/', function(req, res) {
        res.send('Hola Mundo'); //=> con esta funcion enviamos la cadena al cliente 
    });

    app.get('/users/:id',(req, res){
        let userId = req.params.id;
        res.send('tu Id es ${userId}');
    });

    app.get("/json/",(req, res)=>{
        res.json({"message": "Hello json"});
    });


Herramientas utiles
    Con la variable global de Node __dirname para calcular la ruta como esta:
        absolutePath = __dirname + '/views/index.html' 
    ya solo es cuestion de pasarla por el send.


Archivos estaticos o Recursos estaticos con "express.static".
    Es una funcion(Middleware) que se utiliza para servir archivos estáticos, como imágenes, 
    archivos CSS o JavaScript, en una aplicación web.
    Si solo hacemos referencia a los archivos estaticos que estan en public, estos no 
    se cargaran es obligatorio usar esta funcion en cierta manera.

    USO:
        app.use(express.static('public')); //=> public: es la direccion de los static sources
    USO DESDE HTML:
        <link rel="stylesheet" href="style.css"> //=> ya solo es necesario indicar el nombre del archivo y no la ruta 



Variables de Entorno y el archivo .env:
    El archivo .env es un archivo oculto que se utiliza para pasar variables de entorno a la aplicación.
    Este archivo es secreto, solamente tú puedes acceder a él, y puede ser utilizado para almacenar datos
    que desees mantener privados u ocultos. Por ejemplo, puedes almacenar claves de APIs de servicios externos 
    o la URI de tu base de datos. También puedes usarlo para guardar opciones de configuración. 

    Para acceder a este archivo es necesario tener intalado la libreria de "dotenv" y junto a esto 
    importarla de la siguiente forma.

    require('dotenv').config(); //=> importamos el archivo.

    Ahora para llamar a la variable se hace de la siguiente manera:
        process.env.NOMBRE_DE_VARIABLE //=>por convencion el nombre de las variables del .env estan en SNAKE_UPPER_CASE


Implementación de Middleware.
    Son funciones que se ejecutan en el flujo de solicitud y respuesta de una aplicación, 
    estos son responsables de procesar y transformar los datos de las solicitudes HTTP antes 
    de que lleguen a la ruta funal o de realizar acciones adicionales despues de que se haya 
    enviado la respuesta.

    Son basicamente funciones que interceptan los manejadores de rutas, añadiendo algun tipo de información.

    Los Middlewares se utilizam para realizar tareas como:

        - Procesamiento de datos: leer o manipular antes de pasarlos a la funcion de Procesamiento, 
        esto nos permite hacer validaciones.

        - Autenticacion y Autorizacion: tambien son utilizados para identificar la identidad de los 
        usuarios, validar token, verificar permisos y realizar acciones de seguridad.

        - Gestion de Errores: se pueden capturar errores y enviar respuestas adecuadas al cliente en caso
        de que ocurra un error durante el procesamiento de la solicitud.

        - Registro y seguimiento de solicitudes y respuestas, permitiendo llevar un registro de las acciones 
        realizadas y facilitando la depuración.


    Partes de un Middleware en Node.
        Al igual que la funciones de Enrutamiento o Controladores, los Middleware pueden acceder al req y res, 
        con execepcion que tiene un 3er parametro "Next", ejemplo.

        function myMiddleware(req, res, next) {
            console.log("I'm a middleware...");
            next();
        }

        next ==> una función que indica que el middleware ha terminado y debe pasar al siguiente middleware o ruta, 
        es importante no olvidar esta funcion, de lo contrario el servidor permanecera bloqueado.


    Implementación de Middleware.
        Al igual que "express.static" es necesario motarlo dentro del proyecto y esto se hace con el metodo use de express.
            - app.use(miMiddleware);
            Es importante saber que el orden de las funciones si afecta en este caso, al se un legueje de interprete.
        Tambien puede montar un middleware en una ruta especifica, esto seria llamando la funcion del middleware en lugar 
        de la funcion HADLER.
    
    Datos importantes.
        Desde un middleware puedes modificar el objero "req", como por ejemplo añadiendo nuevos datos, para despues desde 
        el HADLER acceder a ellos, por ejemplo.
        app.get("/now",(req, res, next) => {
                req.string = "example"; //=> creamos una nueva propiedad
                next();
            },
            (req, res) => {
                res.send(req.string); //=> accedemos a ella desde el HADLER
            });


    Notas de implementacion. //Informacion no validada por el momento.  
        implementar un middleware de la forma anterior hace que se implemente en todas la rutas anteriores,
        pero si quieremos que solo se aplique en ciertas rutas que cumplan con un method especifico debemos 
        especificarlo, por ejemplo.
            app.POST(miMiddleware);
            app.GET(miMiddleware);



OBTENCION DE DATOS DEL CLIENTE.

    Entrada de parámetros de ruta del cliente.
        Es la primera form aque vimos como se envian los datos, con un orden en los Parametros:
            route_path: '/user/:userId/book/:bookId'
            actual_request_URL: '/user/546/book/6754'
        
    Entrada de parámetros de consulta del cliente:
        La cadena de consulta está delimitada por un signo de interrogación (?), e incluye 
        parejas de campo=valor. Express puede analizar los datos de la cadena de consulta, 
        y llenar el objeto req.query. Algunos caracteres, como el porcentaje (%), no pueden
         estar en URLs.

        Ejemplos:
        route_path: '/library'
        actual_request_URL: '/library?userId=546&bookId=6754'
